// Generated by Dagger (https://dagger.dev).
package com.nazarov.movieslist.movies.di;

import androidx.lifecycle.ViewModel;
import com.nazarov.movieslist.core.DependenciesProvider;
import com.nazarov.movieslist.core.di.ViewModelFactory;
import com.nazarov.movieslist.coreui.fragment.BaseFragment_MembersInjector;
import com.nazarov.movieslist.coreui.fragment.BaseRoutingFragment_MembersInjector;
import com.nazarov.movieslist.movies.data.api.MoviesApi;
import com.nazarov.movieslist.movies.data.repository.MoviesRepository;
import com.nazarov.movieslist.movies.data.repository.MoviesRepository_Factory;
import com.nazarov.movieslist.movies.presentation.fragment.MoviesFragment;
import com.nazarov.movieslist.movies.presentation.router.MoviesRouter;
import com.nazarov.movieslist.movies.presentation.viewmodel.MoviesViewModel;
import com.nazarov.movieslist.movies.presentation.viewmodel.MoviesViewModel_Factory;
import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMoviesComponent {
  private DaggerMoviesComponent() {
  }

  public static MoviesComponent.Factory factory() {
    return new Factory();
  }

  private static final class Factory implements MoviesComponent.Factory {
    @Override
    public MoviesComponent create(DependenciesProvider dependenciesProvider) {
      Preconditions.checkNotNull(dependenciesProvider);
      return new MoviesComponentImpl(new MoviesNetworkModule(), dependenciesProvider);
    }
  }

  private static final class MoviesComponentImpl implements MoviesComponent {
    private final MoviesComponentImpl moviesComponentImpl = this;

    private Provider<Retrofit> provideRetrofitProvider;

    private Provider<MoviesApi> provideAuthorizationApiProvider;

    private Provider<MoviesRepository> moviesRepositoryProvider;

    private Provider<MoviesViewModel> moviesViewModelProvider;

    private MoviesComponentImpl(MoviesNetworkModule moviesNetworkModuleParam,
        DependenciesProvider dependenciesProviderParam) {

      initialize(moviesNetworkModuleParam, dependenciesProviderParam);

    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> mapOfClassOfAndProviderOfViewModel(
        ) {
      return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(MoviesViewModel.class, ((Provider) moviesViewModelProvider));
    }

    private ViewModelFactory viewModelFactory() {
      return new ViewModelFactory(mapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MoviesNetworkModule moviesNetworkModuleParam,
        final DependenciesProvider dependenciesProviderParam) {
      this.provideRetrofitProvider = new ProvideRetrofitProvider(dependenciesProviderParam);
      this.provideAuthorizationApiProvider = MoviesNetworkModule_ProvideAuthorizationApiFactory.create(moviesNetworkModuleParam, provideRetrofitProvider);
      this.moviesRepositoryProvider = MoviesRepository_Factory.create(provideAuthorizationApiProvider);
      this.moviesViewModelProvider = MoviesViewModel_Factory.create(moviesRepositoryProvider);
    }

    @Override
    public void inject(MoviesFragment moviesFragment) {
      injectMoviesFragment(moviesFragment);
    }

    private MoviesFragment injectMoviesFragment(MoviesFragment instance) {
      BaseFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactory());
      BaseRoutingFragment_MembersInjector.injectRouter(instance, new MoviesRouter());
      return instance;
    }

    private static final class ProvideRetrofitProvider implements Provider<Retrofit> {
      private final DependenciesProvider dependenciesProvider;

      ProvideRetrofitProvider(DependenciesProvider dependenciesProvider) {
        this.dependenciesProvider = dependenciesProvider;
      }

      @Override
      public Retrofit get() {
        return Preconditions.checkNotNullFromComponent(dependenciesProvider.provideRetrofit());
      }
    }
  }
}
